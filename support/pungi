#!/usr/bin/python -tt
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import os
import pypungi
import pypungi.config
import yum
import pykickstart.parser
import pykickstart.version
import subprocess

# For overriding the pypungi methods
import yum
import os
import re
import shutil
import sys
import gzip
import pypungi.util
import logging
import urlgrabber.progress
import subprocess
import createrepo
import ConfigParser
import pypungi.splittree

class CLIPpungi(pypungi.Pungi):
    def doCreateIsos(self, split=True):
        """Create isos of the tree, optionally splitting the tree for split media."""

        isolist=[]
        anaruntime = '/usr/lib/anaconda-runtime/boot'
        discinfofile = os.path.join(self.topdir, '.discinfo') # we use this a fair amount

        pypungi.util._ensuredir(self.isodir, self.logger,
                           force=self.config.getboolean('pungi', 'force'),
                           clean=True) # This is risky...

        # setup the base command
        mkisofs = ['/usr/bin/mkisofs']
        mkisofs.extend(['-f', '-v', '-U', '-J', '-R', '-T', '-m', 'repoview', '-m', 'boot.iso']) # common mkisofs flags

        x86bootargs = ['-b', 'isolinux/isolinux.bin', '-c', 'isolinux/boot.cat',
            '-no-emul-boot', '-boot-load-size', '4', '-boot-info-table']

        ia64bootargs = ['-b', 'images/boot.img', '-no-emul-boot']

        ppcbootargs = ['-part', '-hfs', '-r', '-l', '-sysid', 'PPC', '-no-desktop', '-allow-multidot', '-chrp-boot']

        ppcbootargs.append('-map')
        ppcbootargs.append(os.path.join(anaruntime, 'mapping'))

        ppcbootargs.append('-magic')
        ppcbootargs.append(os.path.join(anaruntime, 'magic'))

        ppcbootargs.append('-hfs-bless') # must be last

        sparcbootargs = ['-G', '/boot/isofs.b', '-B', '...', '-s', '/boot/silo.conf', '-sparc-label', '"sparc"']


        # Check the size of the tree
        # This size checking method may be bunk, accepting patches...
        if not self.config.get('pungi', 'arch') == 'source':
            treesize = int(subprocess.Popen(mkisofs + ['-print-size', '-quiet', self.topdir], stdout=subprocess.PIPE).communicate()[0])
        else:
            srcdir = os.path.join(self.config.get('pungi', 'destdir'), self.config.get('pungi', 'version'),
                                  self.config.get('pungi', 'flavor'), 'source', 'SRPMS')

            treesize = int(subprocess.Popen(mkisofs + ['-print-size', '-quiet', srcdir], stdout=subprocess.PIPE).communicate()[0])
        # Size returned is 2KiB clusters or some such.  This translates that to MiB.
        treesize = treesize * 2048 / 1024 / 1024

        if not self.config.get('pungi', 'arch') == 'source':
            self.doCreateMediarepo(split=False)

        if treesize > 700: # we're larger than a 700meg CD
            isoname = '%s-%s-%s-DVD.iso' % (self.config.get('pungi', 'iso_basename'), self.config.get('pungi', 'version'),
                self.config.get('pungi', 'arch'))
        else:
            isoname = '%s-%s-%s.iso' % (self.config.get('pungi', 'iso_basename'), self.config.get('pungi', 'version'),
                self.config.get('pungi', 'arch'))

        isofile = os.path.join(self.isodir, isoname)

        if not self.config.get('pungi', 'arch') == 'source':
            # move the main repodata out of the way to use the split repodata
            if os.path.isdir(os.path.join(self.config.get('pungi', 'destdir'),
                                          'repodata-%s' % self.config.get('pungi', 'arch'))):
                shutil.rmtree(os.path.join(self.config.get('pungi', 'destdir'),
                                           'repodata-%s' % self.config.get('pungi', 'arch')))

            shutil.move(os.path.join(self.topdir, 'repodata'), os.path.join(self.config.get('pungi', 'destdir'),
                'repodata-%s' % self.config.get('pungi', 'arch')))
            shutil.copytree('%s-disc1/repodata' % self.topdir, os.path.join(self.topdir, 'repodata'))

        # setup the extra mkisofs args
        extraargs = []

        if self.config.get('pungi', 'arch') == 'i386' or self.config.get('pungi', 'arch') == 'x86_64':
            extraargs.extend(x86bootargs)
        elif self.config.get('pungi', 'arch') == 'ia64':
            extraargs.extend(ia64bootargs)
        elif self.config.get('pungi', 'arch') == 'ppc':
            extraargs.extend(ppcbootargs)
            extraargs.append(os.path.join(self.topdir, "ppc/mac"))
        elif self.config.get('pungi', 'arch') == 'sparc':
            extraargs.extend(sparcbootargs)

        extraargs.append('-V')
        if treesize > 700:
            extraargs.append('%s %s %s DVD' % (self.config.get('pungi', 'name'),
                self.config.get('pungi', 'version'), self.config.get('pungi', 'arch')))
        else:
            extraargs.append('%s %s %s' % (self.config.get('pungi', 'name'),
                self.config.get('pungi', 'version'), self.config.get('pungi', 'arch')))

        extraargs.extend(['-o', isofile])

        if not self.config.get('pungi', 'arch') == 'source':
            extraargs.append(self.topdir)
        else:
            extraargs.append(os.path.join(self.archdir, 'SRPMS'))

        # run the command
        pypungi.util._doRunCommand(mkisofs + extraargs, self.logger)

        # implant md5 for mediacheck on all but source arches
        if not self.config.get('pungi', 'arch') == 'source':
            pypungi.util._doRunCommand(['/usr/bin/implantisomd5', isofile], self.logger)

        # shove the checksum into a file
        csumfile = os.path.join(self.isodir, '%s-%s-%s-CHECKSUM' % (
                                self.config.get('pungi', 'iso_basename'),
                                self.config.get('pungi', 'version'),
                                self.config.get('pungi', 'arch')))
        # Write a line about what checksums are used.
        # sha256sum is magic...
        file = open(csumfile, 'w')
        file.write('# The image checksum(s) are generated with sha256sum.\n')
        file.close()
        self._doIsoChecksum(isofile, csumfile)

        # return the .discinfo file
        if not self.config.get('pungi', 'arch') == 'source':
            shutil.rmtree(os.path.join(self.topdir, 'repodata')) # remove our copied repodata
            shutil.move(os.path.join(self.config.get('pungi', 'destdir'),
                'repodata-%s' % self.config.get('pungi', 'arch')), os.path.join(self.topdir, 'repodata'))

        # Move the unified disk out
        if not self.config.get('pungi', 'arch') == 'source':
            shutil.rmtree(os.path.join(self.workdir, 'os-unified'), ignore_errors=True)
            shutil.move('%s-disc1' % self.topdir, os.path.join(self.workdir, 'os-unified'))

        # Write out a line describing the media
        self.writeinfo('media: %s' % self.mkrelative(isofile))


        # See if our tree size is big enough and we want to make split media
        if treesize > 700 and split:
            discs = 0
            if self.config.get('pungi', 'arch') == 'source':
                self.doSplitSRPMs()
                dirs = os.listdir(self.archdir)
                for dir in dirs:
                    if dir.startswith('%s-disc' % os.path.basename(self.topdir)):
                        discs += 1
                # Set the number of discs for future use
                self.config.set('pungi', 'discs', str(discs))
            else:
                self.doPackageorder()
                self.doSplittree()
                # Figure out how many discs splittree made for us
                dirs = os.listdir(self.archdir)
                for dir in dirs:
                    if dir.startswith('%s-disc' % os.path.basename(self.topdir)):
                        discs += 1
                # Set the number of discs for future use
                self.config.set('pungi', 'discs', str(discs))
                self.doCreateMediarepo(split=True)
            for disc in range(1, discs + 1): # cycle through the CD isos
                isoname = '%s-%s-%s-disc%s.iso' % (self.config.get('pungi', 'iso_basename'), self.config.get('pungi', 'version'),
                    self.config.get('pungi', 'arch'), disc)
                isofile = os.path.join(self.isodir, isoname)

                extraargs = []

                if disc == 1: # if this is the first disc, we want to set boot flags
                    if self.config.get('pungi', 'arch') == 'i386' or self.config.get('pungi', 'arch') == 'x86_64':
                        extraargs.extend(x86bootargs)
                    elif self.config.get('pungi', 'arch') == 'ia64':
                        extraargs.extend(ia64bootargs)
                    elif self.config.get('pungi', 'arch') == 'ppc':
                        extraargs.extend(ppcbootargs)
                        extraargs.append(os.path.join('%s-disc%s' % (self.topdir, disc), "ppc/mac"))
                    elif self.config.get('pungi', 'arch') == 'sparc':
                        extraargs.extend(sparcbootargs)

                extraargs.append('-V')
                extraargs.append('%s %s %s Disc %s' % (self.config.get('pungi', 'name'),
                    self.config.get('pungi', 'version'), self.config.get('pungi', 'arch'), disc))

                extraargs.append('-o')
                extraargs.append(isofile)

                extraargs.append(os.path.join('%s-disc%s' % (self.topdir, disc)))

                # run the command
                pypungi.util._doRunCommand(mkisofs + extraargs, self.logger)

                # implant md5 for mediacheck on all but source arches
                if not self.config.get('pungi', 'arch') == 'source':
                    pypungi.util._doRunCommand(['/usr/bin/implantisomd5', isofile], self.logger)

                # shove the checksum into a file
                self._doIsoChecksum(isofile, csumfile)

                # keep track of the CD images we've written
                isolist.append(self.mkrelative(isofile))

            # Write out a line describing the CD set
            self.writeinfo('mediaset: %s' % ' '.join(isolist))

        # Now link the boot iso
        if not self.config.get('pungi', 'arch') == 'source' and \
        os.path.exists(os.path.join(self.topdir, 'images', 'boot.iso')):
            isoname = '%s-%s-%s-netinst.iso' % (self.config.get('pungi', 'iso_basename'),
                self.config.get('pungi', 'version'), self.config.get('pungi', 'arch'))
            isofile = os.path.join(self.isodir, isoname)

            # link the boot iso to the iso dir
            pypungi.util._link(os.path.join(self.topdir, 'images', 'boot.iso'), isofile, self.logger)

            # shove the checksum into a file
            self._doIsoChecksum(isofile, csumfile)

        # Do some clean up
        dirs = os.listdir(self.archdir)

        for directory in dirs:
            if directory.startswith('os-disc') or directory.startswith('SRPMS-disc'):
                if os.path.exists(os.path.join(self.workdir, directory)):
                    shutil.rmtree(os.path.join(self.workdir, directory))
                shutil.move(os.path.join(self.archdir, directory), os.path.join(self.workdir, directory))

        self.logger.info("CreateIsos is done.")


def main():

    config = pypungi.config.Config()

    (opts, args) = get_arguments(config)

    # You must be this high to ride if you're going to do root tasks
    if os.geteuid () != 0 and (opts.do_all or opts.do_buildinstall):
        print >> sys.stderr, "You must run pungi as root"
        return 1
    
    if opts.do_all or opts.do_buildinstall:
        try:
            selinux = subprocess.Popen('/usr/sbin/getenforce', 
                                       stdout=subprocess.PIPE, 
                                       stderr=open('/dev/null', 'w')).communicate()[0].strip('\n')
            if selinux == 'Enforcing':
                print >> sys.stdout, "WARNING: SELinux is enforcing.  This may lead to a compose with selinux disabled."
                print >> sys.stdout, "Consider running with setenforce 0."
        except:
            pass

    # Set up the kickstart parser and pass in the kickstart file we were handed
    ksparser = pykickstart.parser.KickstartParser(pykickstart.version.makeVersion())
    ksparser.readKickstart(opts.config)

    if opts.sourceisos:
        config.set('pungi', 'arch', 'source')

    for part in ksparser.handler.partition.partitions:
        if part.mountpoint == 'iso':
            config.set('pungi', 'cdsize', str(part.size))
            
    config.set('pungi', 'force', str(opts.force))

    # Set up our directories
    if not os.path.exists(config.get('pungi', 'destdir')):
        try:
            os.makedirs(config.get('pungi', 'destdir'))
        except OSError, e:
            print >> sys.stderr, "Error: Cannot create destination dir %s" % config.get('pungi', 'destdir')
            sys.exit(1)
    else:
        print >> sys.stdout, "Warning: Reusing existing destination directory."

    cachedir = config.get('pungi', 'cachedir')

    if not os.path.exists(cachedir):
        try:
            os.makedirs(cachedir)
        except OSError, e:
            print >> sys.stderr, "Error: Cannot create cache dir %s" % cachedir
            sys.exit(1)

    # Set debuginfo flag
    if opts.nodebuginfo:
        config.set('pungi', 'debuginfo', "False")

    # Actually do work.
    mypungi = CLIPpungi(config, ksparser)

    if not opts.sourceisos:
        if opts.do_all or opts.do_gather or opts.do_buildinstall:
            mypungi._inityum() # initialize the yum object for things that need it
        if opts.do_all or opts.do_gather:
            mypungi.getPackageObjects()
            if not opts.nosource or opts.selfhosting or opts.fulltree:
                mypungi.createSourceHashes()
                mypungi.getSRPMList()
            if opts.selfhosting:
                mypungi.resolvePackageBuildDeps()
            if opts.fulltree:
                mypungi.completePackageSet()
            if opts.selfhosting and opts.fulltree:
                # OUCH.
                while 1:
                    plen = len(mypungi.srpmpolist)
                    mypungi.resolvePackageBuildDeps()
                    if plen == len(mypungi.srpmpolist):
                        break
                    plen = len(mypungi.srpmpolist)
                    mypungi.completePackageSet()
                    if plen == len(mypungi.srpmpolist):
                        break
            mypungi.downloadPackages()
            mypungi.makeCompsFile()
            if not opts.nodebuginfo:
                mypungi.getDebuginfoList()
                mypungi.downloadDebuginfo()
            if not opts.nosource:
                mypungi.downloadSRPMs()

        if opts.do_all or opts.do_createrepo:
           mypungi.doCreaterepo()

        if opts.do_all or opts.do_buildinstall:
           mypungi.doGetRelnotes()
           mypungi.doBuildinstall()

        if opts.do_all or opts.do_createiso:
           mypungi.doCreateIsos(split=opts.nosplitmedia)

    # Do things slightly different for src.
    if opts.sourceisos:
        # we already have all the content gathered
        mypungi.topdir = os.path.join(config.get('pungi', 'destdir'),
                                      config.get('pungi', 'version'),
                                      config.get('pungi', 'flavor'),
                                      'source', 'SRPMS')
        mypungi.doCreaterepo(comps=False)
        if opts.do_all or opts.do_createiso:
            mypungi.doCreateIsos(split=opts.nosplitmedia)

    print "All done!"

if __name__ == '__main__':
    from optparse import OptionParser
    import sys
    import time

    today = time.strftime('%Y%m%d', time.localtime())

    def get_arguments(config):
        parser = OptionParser(version="%prog 2.0.22")

        def set_config(option, opt_str, value, parser, config):
            config.set('pungi', option.dest, value)
            # When setting name, also set the iso_basename.
            if option.dest == 'name':
                config.set('pungi', 'iso_basename', value)

        # Pulled in from config file to be cli options as part of pykickstart conversion
        parser.add_option("--name", dest="name", type="string",
          action="callback", callback=set_config, callback_args=(config, ),
          help='the name for your distribution (defaults to "Fedora")')
        parser.add_option("--ver", dest="version", type="string",
          action="callback", callback=set_config, callback_args=(config, ),
          help='the version of your distribution (defaults to datestamp)')
        parser.add_option("--flavor", dest="flavor", type="string",
          action="callback", callback=set_config, callback_args=(config, ),
          help='the flavor of your distribution spin (optional)')
        parser.add_option("--destdir", dest="destdir", type="string",
          action="callback", callback=set_config, callback_args=(config, ),
          help='destination directory (defaults to current directory)')
        parser.add_option("--cachedir", dest="cachedir", type="string",
          action="callback", callback=set_config, callback_args=(config, ),
          help='package cache directory (defaults to /var/cache/pungi)')
        parser.add_option("--bugurl", dest="bugurl", type="string",
          action="callback", callback=set_config, callback_args=(config, ),
          help='the url for your bug system (defaults to http://bugzilla.redhat.com)')
        parser.add_option("--selfhosting", action="store_true", dest="selfhosting",
          help='build a self-hosting tree by following build dependencies (optional)')
        parser.add_option("--fulltree", action="store_true", dest="fulltree",
          help='build a tree that includes all packages built from corresponding source rpms (optional)')
        parser.add_option("--nosource", action="store_true", dest="nosource",
          help='disable gathering of source packages (optional)')
        parser.add_option("--nodebuginfo", action="store_true", dest="nodebuginfo",
          help='disable gathering of debuginfo packages (optional)')
        parser.add_option("--nosplitmedia", action="store_false", dest="nosplitmedia", default=True,
          help='disable creation of split media (optional)')
        parser.add_option("--sourceisos", default=False, action="store_true", dest="sourceisos",
          help='Create the source isos (other arch runs must be done)')
        parser.add_option("--force", default=False, action="store_true",
          help='Force reuse of an existing destination directory (will overwrite files)')

        parser.add_option("-c", "--config", dest="config",
          help='Path to kickstart config file')
        parser.add_option("--all-stages", action="store_true", default=True, dest="do_all",
          help="Enable ALL stages")
        parser.add_option("-G", action="store_true", default=False, dest="do_gather",
          help="Flag to enable processing the Gather stage")
        parser.add_option("-C", action="store_true", default=False, dest="do_createrepo",
          help="Flag to enable processing the Createrepo stage")
        parser.add_option("-B", action="store_true", default=False, dest="do_buildinstall",
          help="Flag to enable processing the BuildInstall stage")
        parser.add_option("-I", action="store_true", default=False, dest="do_createiso",
          help="Flag to enable processing the CreateISO stage")


        (opts, args) = parser.parse_args()
        
        if not opts.config:
            parser.print_help()
            sys.exit(0)
            
        if not config.get('pungi', 'flavor').isalnum() and not config.get('pungi', 'flavor') == '':
            print >> sys.stderr, "Flavor must be alphanumeric."
            sys.exit(1)

        if opts.do_gather or opts.do_createrepo or opts.do_buildinstall or opts.do_createiso:
            opts.do_all = False
        return (opts, args)

    main()
